from flask import Flask, render_template, flash, redirect, url_for, session, logging, request
from flask_mysqldb import MySQL
from wtforms import Form, StringField, SelectField, DecimalField, EmailField, PasswordField, SubmitField, validators
from passlib.hash import sha256_crypt

app = Flask(__name__)

# MySQL configuration
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'hGTrDAfF8zY'
app.config['MYSQL_DB'] = 'application'
app.config['MYSQL_CURSORCLASS'] = 'DictCursor'

# MySQL initialization
mysql = MySQL(app)

class LaboratoryData(Form):
    user_first_name = StringField('نام',[
        validators.Length(min=1, max=100),
        validators.Regexp('^[‌ آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$'),
        validators.InputRequired()])
    user_last_name = StringField('نام خانوادگی',[
        validators.Length(min=1, max=100),
        validators.Regexp('^[‌ آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$'),
        validators.InputRequired()])
    entry_date = StringField('تاریخ ثبت داده‌ها', render_kw={'readonly': True, 'value':'اسفند'})
    lab_name = StringField('نام آزمایشگاه',[
        validators.Length(min=1, max=100),
        validators.Regexp('^[‌ آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$'),
        validators.InputRequired()])    
    tech_first_name = StringField('نام کارشناس',[
        validators.Length(min=1, max=100),
        validators.Regexp('^[‌ آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$'),
        validators.InputRequired()])
    tech_last_name = StringField('نام خانوادگی کارشناس',[
        validators.Length(min=1, max=100),
        validators.Regexp('^[‌ آابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$'),
        validators.InputRequired()])
    station_id = SelectField('نام ایستگاه',[
        validators.InputRequired()], choices=[('1', 'ایستگاه ۱'), ('2', 'ایستگاه ۲'), ('3', 'ایستگاه ۳')])
    measur_start_date = StringField('تاریخ شروع اندازه‌گیری',[
        validators.InputRequired()])
    measur_end_date = StringField('تاریخ پایان اندازه‌گیری',[
        validators.InputRequired()])
    ag_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    ag_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    al_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    al_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    as_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    as_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    ba_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    ba_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    be_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    be_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    cd_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    cd_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    co_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    co_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    cr_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    cr_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    cu_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    cu_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    f_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    f_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    fe_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    fe_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    hg_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    hg_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    mo_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    mo_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    ni_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    ni_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    pb_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    pb_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    sb_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    sb_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    se_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    se_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    sn_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    sn_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    ti_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    ti_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    v_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    v_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    zn_ci = DecimalField('Ci', [
        validators.InputRequired()],
        render_kw = { 'step': '0.1' })
    zn_local_ci = DecimalField('Local Ci', 
        render_kw = { 'step': '0.1'})
    submit = SubmitField('ثبت داده‌ها')

@app.route("/", methods=['GET', 'POST'])
def main():
    form = LaboratoryData(request.form)
    if request.method == 'POST' and form.validate():
        user_first_name = form.user_first_name.data
        user_last_name = form.user_last_name.data
        entry_date = form.entry_date.data
        lab_name = form.lab_name.data
        tech_first_name = form.tech_first_name.data
        tech_last_name = form.tech_last_name.data
        station_id = form.station_id.data
        measur_start_date = form.measur_start_date.data
        measur_end_date = form.measur_end_date.data
        ag_ci = form.ag_ci.data
        ag_local_ci = form.ag_local_ci.data
        al_ci = form.al_ci.data
        al_local_ci = form.al_local_ci.data
        as_ci = form.as_ci.data
        as_local_ci = form.as_local_ci.data
        ba_ci = form.ba_ci.data
        ba_local_ci = form.ba_local_ci.data
        be_ci = form.be_ci.data
        be_local_ci = form.be_local_ci.data
        cd_ci = form.cd_ci.data
        cd_local_ci = form.cd_local_ci.data
        co_ci = form.co_ci.data
        co_local_ci = form.co_local_ci.data
        cr_ci = form.cr_ci.data
        cr_local_ci = form.cr_local_ci.data
        cu_ci = form.cu_ci.data
        cu_local_ci = form.cu_local_ci.data
        f_ci = form.f_ci.data
        f_local_ci = form.f_local_ci.data
        fe_ci = form.fe_ci.data
        fe_local_ci = form.fe_local_ci.data
        hg_ci = form.hg_ci.data
        hg_local_ci = form.hg_local_ci.data
        mo_ci = form.mo_ci.data
        mo_local_ci = form.mo_local_ci.data
        ni_ci = form.ni_ci.data
        ni_local_ci = form.ni_local_ci.data
        pb_ci = form.pb_ci.data
        pb_local_ci = form.pb_local_ci.data
        sb_ci = form.sb_ci.data
        sb_local_ci = form.sb_local_ci.data
        se_ci = form.se_ci.data
        se_local_ci = form.se_local_ci.data
        sn_ci = form.sn_ci.data
        sn_local_ci = form.sn_local_ci.data
        ti_ci = form.ti_ci.data
        ti_local_ci = form.ti_local_ci.data
        v_ci = form.v_ci.data
        v_local_ci = form.v_local_ci.data
        zn_ci = form.zn_ci.data
        zn_local_ci = form.zn_local_ci.data

        cur = mysql.connection.cursor()
        cur.execute("INSERT INTO lab_data(user_first_name, user_last_name, entry_date, lab_name, tech_first_name, tech_last_name, station_id, measur_start_date, measur_end_date, ag_ci, ag_local_ci, al_ci, al_local_ci, as_ci, as_local_ci, ba_ci, ba_local_ci, be_ci, be_local_ci, cd_ci, cd_local_ci, co_ci, co_local_ci, cr_ci, cr_local_ci, cu_ci, cu_local_ci, f_ci, f_local_ci, fe_ci, fe_local_ci, hg_ci, hg_local_ci, mo_ci, mo_local_ci, ni_ci, ni_local_ci, pb_ci, pb_local_ci, sb_ci, sb_local_ci, se_ci, se_local_ci, sn_ci, sn_local_ci, ti_ci, ti_local_ci, v_ci, v_local_ci, zn_ci, zn_local_ci) VALUES(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)", (user_first_name, user_last_name, entry_date, lab_name, tech_first_name, tech_last_name, station_id, measur_start_date, measur_end_date, ag_ci, ag_local_ci, al_ci, al_local_ci, as_ci, as_local_ci, ba_ci, ba_local_ci, be_ci, be_local_ci, cd_ci, cd_local_ci, co_ci, co_local_ci, cr_ci, cr_local_ci, cu_ci, cu_local_ci, f_ci, f_local_ci, fe_ci, fe_local_ci, hg_ci, hg_local_ci, mo_ci, mo_local_ci, ni_ci, ni_local_ci, pb_ci, pb_local_ci, sb_ci, sb_local_ci, se_ci, se_local_ci, sn_ci, sn_local_ci, ti_ci, ti_local_ci, v_ci, v_local_ci, zn_ci, zn_local_ci))
        mysql.connection.commit()
        cur.close()
        flash('حساب کاربری شما درست شد.', 'success')
        return 'Your mama gay'
    return render_template('main.html', form=form)
   

# class RegistrationForm(Form):
#     user_first_name = StringField('نام',[
#         validators.Length(min=1, max=50),
#         validators.InputRequired()
#         ])
#     user_last_name = StringField('نام خانوادگی', [
#         validators.Length(min=1, max=50),
#         validators.InputRequired()
#         ])
#     email = EmailField('رایانامه', [
#         validators.Email(),
#         validators.InputRequired()
#         ])
#     username = StringField('نام کاربری',
#     [
#         validators.Length(min=4, max=25,message='نام کاربری طولانی است.'),
#         validators.Regexp('^(?=.{8,20}$)(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$'),
#         validators.InputRequired()
#     ],
#     render_kw = {'dir': 'ltr'}
#     )
#     password = PasswordField('اسم رمز',
#     [
#         validators.InputRequired()
#     ],
#     render_kw = {'dir': 'ltr'}
#     )
#     password_confirmation = PasswordField('تکرار اسم رمز', [
#         validators.DataRequired(),
#         validators.EqualTo('password', message='اسم رمزها یکسان نمی‌باشد.'),
#         validators.InputRequired()
#     ],
#     render_kw = {'dir': 'ltr'}
#     )
#     submit = SubmitField('نام‌نویسی')

# @app.route('/registration', methods=['GET', 'POST'])
# def register():
#     form = RegistrationForm(request.form)
#     if request.method == 'POST' and form.validate():
#         first_name = form.first_name.data
#         last_name = form.last_name.data
#         email = form.email.data
#         username = form.username.data
#         password = sha256_crypt.encrypt(str(form.password.data))

#         cur = mysql.connection.cursor()
#         cur.execute("INSERT INTO users(first_name, last_name, email, username, password) VALUES(%s, %s, %s, %s, %s)", (first_name, last_name, email, username, password))
#         mysql.connection.commit()
#         cur.close()
#         flash('حساب کاربری شما درست شد.', 'success')

#         return redirect(url_for('about'))
    
#     return render_template('registration.html', form=form)

@app.route('/about')
def about():
    return render_template('about.html')

if __name__ == "__main__":
    app.secret_key='secret'
    app.run(host='0.0.0.0', debug=True)